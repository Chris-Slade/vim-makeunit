*makeunit* Create Java unit tests based on the current file

Author: Chris-Slade <https://github.com/Chris-Slade>
License: MIT

This plugin is only available if 'compatible' is not set.

INTRODUCTION                                    *makeunit-intro* *:MakeUnit*

This plugin provides a command, *:MakeUnit*, which scans the current file
(expected to be a Java source file) and creates a unit-test file. If the file
has a package declaration, that package will be used in the unit-test file.
Likewise, for each public method "foo" in the source file, a corresponding

    @Test
    public void testFoo() {
    }

stub method will be created.

In a project with a Maven-style layout (source code in a "src/" directory,
and production and test code divided between subdirectories of "src/main/" and
"src/test/", respectively), the path of the new unit-test file will be the
path of the current file, but with "src/main" replaced with "src/test".

If the project does not have a Maven-style layout, the unit test will be
opened in the same directory as the source file it is testing.

Unit-test files are opened with the same name as the source file, but with
"Test" appended. The files are not written --- just a buffer is created. This
allows you to change the name or location of the generated file by using the
":saveas" command instead of ":write".

If a conflicting file already exists, a warning is issued and the existing file
is opened instead.

EXAMPLES                                        *makeunit-examples*

The following examples might help to explain the purpose and workings of this
plug-in better.

Executing the commands >

    :edit src/main/com/example/myapp/controller/AccountController.java
    :MakeUnit

will open a new buffer (as if opened with ":edit" --- make
sure you write any unsaved changes, or set 'confirm', or set
your buffers to automatically write changes) with the path
"src/main/com/example/myapp/controller/AccountControllerTest.java". The file
will then be populated with a template consisting of a package statement,
imports (see |makeunit-settings|), a top-level test class, and annotated stub
methods for each public method in "AccountController.java".

In a project with a different layout (e.g. a single "src/" directory
containing all source files), the commands >

    :edit src/Utils.java
    :MakeUnit

will open a buffer with the path "src/UtilsTest.java".

SETTINGS                                        *makeunit-settings*
                                                *makeunit-config*

                                                *g:makeunit_imports*
g:makeunit_imports
    A list of imports to be placed in the generated file. The default is
[ 'org.junit.Test' ], which results in

    import org.junit.Test;

being placed before any static imports or the class declaration but after the
package statement, if present.

                                                *g:makeunit_static_imports*
g:makeunit_static_imports
    A list of static imports to be placed in the generated file. Static imports
are placed after any non-static imports, but before the class declaration. The
default is [ 'org.junit.assertTrue' ], which produces

    import static org.junit.assertTrue;

                                                *g:makeunit_use_allman_style*
g:makeunit_use_allman_style
    When set to a true value, opening braces ("{") will be placed on the line
following the statement which requires them, e.g.

    public class MyTest
    {
        ...
    }

When set to a false value, K&R/Linux-style braces will be used, e.g.

    public class MyTest {
        ...
    }

False by default.

 vim:tw=78:et:ft=help:norl:
